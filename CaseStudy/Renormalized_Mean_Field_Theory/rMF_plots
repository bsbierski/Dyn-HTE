


include("../../LatticeGraphs.jl")
include("../../Embedding.jl")
include("../../ConvenienceFunctions.jl") 
include("../../plotConventions.jl")




L = 12
chain_lattice = getLattice(L,"chain");
@load "CaseStudy/Renormalized_Mean_Field_Theory/Chain_S1half_c_iipDyn_nmax12_L12.jld2" c_iipDyn_mat
c_iip_chain = c_iipDyn_mat


triang_lattice = getLattice(L,"triang");
@load "CaseStudy/Renormalized_Mean_Field_Theory/Triangular_Lattice_S1half_c_iipDyn_nmax12_L12.jld2" single_stored_object
c_iip_triang = single_stored_object


kagome_lattice = getLattice(L,"kagome");
@load "CaseStudy/Renormalized_Mean_Field_Theory/Kagome_Lattice_S1half_c_iipDyn_nmax12_L12.jld2" c_iipDyn_mat
c_iip_kagome = c_iipDyn_mat


pyrochlore_lattice = getLattice(L,"pyrochlore");
@load "CaseStudy/Renormalized_Mean_Field_Theory/Pyrochlore_Lattice_S1half_c_iipDyn_nmax12_L12.jld2" c_iipDyn_mat
c_iip_pyrochlore = c_iipDyn_mat


using CairoMakie
fig = CairoMakie.Figure(layout=(3,3), size=(aps_width,aps_width),fontsize=7) #backgroundcolor = :transparent)




function calc_taylorinvmat_fun(corr)
    orderJ,orderω = size(corr)
    @variables x
    taylormat = y -> sum(y[i,1]*x^(i-1) for i =  1:orderJ)
    invtaylormat = inv(taylormat(corr));
    t = Taylor1(Float64,orderJ-1)
    return  substitute(invtaylormat, Dict(x=>t)) 
end

### chain

###QMC data
QMCbetas = [0, 0.5, 1.0, 1.5, 2.0, 2.5, 3, 4, 5, 6, 7, 8, 9, 10]
fs = [4, 4.228359252922975, 4.972941835020016, 6.262842981660236, 
  8.034188800241, 10.170915326395479, 12.513608854443149, 
  17.500654887074752, 22.59466799494428, 27.647081475999613, 
  32.696822363289336, 37.66727122510188, 42.631499009231305, 
  47.63892189825918]
gs = [0, 0.5331037777143603, 1.1749560328465218, 1.9830297440003888, 
  2.9457772366259505, 4.039309023432947, 5.17629294244374, 
  7.486534321669895, 9.748107036203425, 11.935348427190947, 
  14.110065180402612, 16.219086068396088, 18.32277163971843, 
  20.458603889181074]
ϵ1s = [0, 0.0003315853417177263, 0.0019288270029839015, 
  0.00799150745186226, 0.031118623522432845, 0.06847416640854603, 
  0.13502108782626027, 0.3125184265080508, 0.5122626846871366, 
  0.7048405267364483, 0.8676720271255824, 1.030294622644043, 
  1.1755097262206777, 1.3017551127324813]





N = 32;
kx = (1:N)*2pi/(N);
kmat = Tuple.([[x,y] for x in kx , y in [0]]);
c_kDyn =  get_c_k(kmat,c_iip_chain,chain_lattice);

## test inverser fourier_transform
invcorrstest = inverse_fourier_transform(kmat,c_kDyn,chain_lattice);
maximum(maximum.(invcorrstest.-c_iip_chain))


invstruc = calc_taylorinvmat_fun.(c_kDyn);
invcorrs_chain = inverse_fourier_transform(kmat,invstruc,chain_lattice);

### Compute A 2D Brillouin zone cut: 
N = 32;
kx = (1:N)*2pi/(N);
ky = (1:N)*2pi/(N); #[0.] #for chains
kmat = Tuple.([[1,1/sqrt(3)].*x .+  [1,-1/sqrt(3)].*y for x in kx, y in ky ]);
c_kDyn =  get_c_k(kmat,c_iip_triang,triang_lattice);
invstruc = calc_taylorinvmat_fun.(c_kDyn);
invcorrs_triang = inverse_fourier_transform(kmat,invstruc,triang_lattice);


################# Kagome ####################

 #in special cases Num values appear. For those we need to read out their Float value
 import Base
 function Base.Float64(x::Num)
     return Float64(Symbolics.value(x))
  end     

 function calc_taylorinvmat_fun(corr::Matrix{Matrix{Float64}})::Matrix{Taylor1{Float64}}
    orderJ,orderω = size(corr[1])
    @variables x::Real
    taylormat = y -> sum(y[i,1]*x^(i-1) for i =  1:orderJ)
    invtaylormat = inv(taylormat.(corr));
    t = Taylor1(Float64,orderJ-1)
    subsfun = y -> substitute(real(y), Dict(x=>t)) #= + 1im* substitute(imag(y), Dict(x=>t) )=# 
    taylorinvmat_fun =  subsfun.(invtaylormat)
    return taylorinvmat_fun
end



N = 30;
kx = (1:N)*2pi/(N);
ky = (1:N)*2pi/(N); #[0.] #for chains
kmat = Tuple.([[1,1/sqrt(3)].*x .+ [1,-1/sqrt(3)].*y for x in kx, y in ky ]);
c_kDyn =  get_c_k_subl(kmat,c_iip_kagome,kagome_lattice);
#test if the inverse is correct
invcorrstest = inverse_fourier_transform_subl(kmat,c_kDyn,kagome_lattice);
maximum(maximum.(invcorrstest.-c_iip_kagome))

#calculate f and g
invstruc = Array{Matrix{Taylor1{Float64}}}(undef,N,N)
#= Threads.@threads =# for i=1:N
    for j = 1:N
        invstruc[i,j] = calc_taylorinvmat_fun(c_kDyn[i,j])

    end
end
invcorrs_kagome = inverse_fourier_transform_subl(kmat,invstruc,kagome_lattice);


###### Pyrochlore
#= 

N = 12;
kx = (1:N)*2pi/(N);
ky = (1:N)*2pi/(N);
kz = (1:N)*2pi/(N); 
kmat = Tuple.([[-1,1,1].*x .+ [1,-1,1].*y .+ [1,1,-1].*z for x in kx, y in ky , z in kz ]);
c_kDyn =  get_c_k_subl(kmat,c_iip_pyrochlore,pyrochlore_lattice);
#test if the inverse is correct
invcorrstest = inverse_fourier_transform_subl(kmat,c_kDyn,pyrochlore_lattice);
maximum(maximum.(invcorrstest.-c_iip_pyrochlore))

#calculate f and g
invstruc = Array{Matrix{Taylor1{Float64}}}(undef,N,N)
#= Threads.@threads =# for i=1:N
    for j = 1:N
        invstruc[i,j] = calc_taylorinvmat_fun(c_kDyn[i,j])

    end
end
invcorrs_pyrochlore = inverse_fourier_transform_subl(kmat,invstruc,pyrochlore_lattice);

 =#

######  Plotting

if true

fig = CairoMakie.Figure(layout=(3,3), size=(aps_width,aps_width),fontsize=7)
grid = fig[1,1]= GridLayout()
axchain = CairoMakie.Axis(grid[1,1], title = "Chain" ,xlabel=L"x = J/T" ,titlesize=10,xlabelsize=12,ylabelsize=12,xgridvisible = false , limits=(0,6,-0.05,1.05), yticks = [0,0.2,0.4,0.6,0.8,1.0])
axtriang = CairoMakie.Axis(grid[1,2], title = "Triangular",xlabel=L"x = J/T" ,titlesize=10,xlabelsize=12,ylabelsize=12,xgridvisible = false, limits=(0,6,-0.05,1.05), yticks = [0,0.2,0.4,0.6,0.8,1.0])
axkagome = CairoMakie.Axis(grid[2,1], title = "Kagome", xlabel=L"x = J/T" ,titlesize=10,xlabelsize=12,ylabelsize=12,xgridvisible = false, limits=(0,6,-0.05,1.05), yticks = [0,0.2,0.4,0.6,0.8,1.0])
axpyro = CairoMakie.Axis(grid[2,2], title = "Pyrochlore", xlabel=L"x = J/T" ,titlesize=10,xlabelsize=12,ylabelsize=12,xgridvisible = false, limits=(0,6,-0.05,1.05), yticks = [0,0.2,0.4,0.6,0.8,1.0])

xvec = collect(0:0.1:10)
if true
    f1 = 0.6
    f2 = 0.4
    f3 = 0.3
    transf1 = get_LinearTrafoToCoeffs_u(12,f1)
    transf2 = get_LinearTrafoToCoeffs_u(13,f2)
    transf3 = get_LinearTrafoToCoeffs_u(12,f3)
    gbyf = transf1*(invcorrs_chain[12]/invcorrs_chain[13]).coeffs
    ϵbyf = transf3*(invcorrs_chain[11]/invcorrs_chain[13]).coeffs
    byf = transf2*vcat(0,(1/invcorrs_chain[13]).coeffs)[:]
    
    
    pade_gbyf = get_pade(Polynomial(gbyf),6,6)
    pade_ϵbyf = get_pade(Polynomial(ϵbyf),6,6)
    pade_byf = get_pade(Polynomial(byf),6,6)
    pade_gbyf2 = get_pade(Polynomial(gbyf),5,5)
    pade_ϵbyf2 = get_pade(Polynomial(ϵbyf),5,5)
    pade_byf2 = get_pade(Polynomial(byf),5,5)
    
   line_gbyf = CairoMakie.lines!(axchain,xvec, x->2*pade_gbyf(tanh(-f1*x)), color = (color_vec[1],0.7))
   line_ϵbyf = CairoMakie.lines!(axchain,xvec, x->2*abs(pade_ϵbyf(tanh(-f3*x))), color = (color_vec[2],0.7))
   line_byf = CairoMakie.lines!(axchain,xvec, x->2*abs(pade_byf(tanh(-f2*x))), color = (color_vec[3],0.7))
    CairoMakie.lines!(axchain,xvec, x->2*pade_gbyf2(tanh(-f1*x)), color = color_vec[1], linestyle = :dash)
    CairoMakie.lines!(axchain,xvec, x->2*abs(pade_ϵbyf2(tanh(-f3*x))), color = color_vec[2], linestyle = :dash)
    CairoMakie.lines!(axchain,xvec, x->2*abs(pade_byf2(tanh(-f2*x))), color = color_vec[3], linestyle = :dash)

    CairoMakie.scatter!(axchain,QMCbetas, 2*gs./fs , color = color_vec[1])
    CairoMakie.scatter!(axchain,QMCbetas, 2*ϵ1s./fs, color = color_vec[2])
    CairoMakie.scatter!(axchain,QMCbetas,2* QMCbetas.*ones(length(fs))./fs, color = color_vec[3])

end

if true
f = 0.5
transf1 = get_LinearTrafoToCoeffs_u(12,f)
transf2 = get_LinearTrafoToCoeffs_u(13,f)
gbyf = transf1*(invcorrs_triang[236]/invcorrs_triang[235]).coeffs
ϵbyf = transf1*(invcorrs_triang[237]/invcorrs_triang[235]).coeffs
byf = transf2*vcat(0,(1/invcorrs_triang[235]).coeffs)[:]




pade_gbyf = get_pade(Polynomial(gbyf),6,6)
pade_ϵbyf = get_pade(Polynomial(ϵbyf),6,6)
pade_byf = get_pade(Polynomial(byf),6,6)
pade_gbyf2 = get_pade(Polynomial(gbyf),5,5)
pade_ϵbyf2 = get_pade(Polynomial(ϵbyf),4,5)
pade_byf2 = get_pade(Polynomial(byf),5,5)

CairoMakie.lines!(axtriang,xvec, x->3*pade_gbyf(tanh(-f1*x)), color = (color_vec[1],0.7))
CairoMakie.lines!(axtriang,xvec, x->3*abs(pade_ϵbyf(tanh(-f3*x))), color = (color_vec[2],0.7))
CairoMakie.lines!(axtriang,xvec, x->3*abs(pade_byf(tanh(-f2*x))), color = (color_vec[3],0.7))
CairoMakie.lines!(axtriang,xvec, x->3*pade_gbyf2(tanh(-f1*x)), color = color_vec[1], linestyle = :dash)
CairoMakie.lines!(axtriang,xvec, x->3*abs(pade_ϵbyf2(tanh(-f3*x))), color = color_vec[2], linestyle = :dash)
CairoMakie.lines!(axtriang,xvec, x->3*abs(pade_byf2(tanh(-f2*x))), color = color_vec[3], linestyle = :dash)


legline = CairoMakie.lines!(axtriang,[-1,-2],[1,1], color = :black)
legdashline = CairoMakie.lines!(axtriang,[-1,-2],[1,1], color = :black, linestyle = :dash)
legscatter = CairoMakie.scatter!(axtriang,[-1,-2],[1,1], color = :black)
end

if true
    f = 0.8
    transf1 = get_LinearTrafoToCoeffs_u(12,f)
    transf2 = get_LinearTrafoToCoeffs_u(13,f)
    gbyf = transf1*(invcorrs_kagome[190,2]/invcorrs_kagome[190,1]).coeffs
    ϵbyf = transf1*(invcorrs_kagome[193,1]/invcorrs_kagome[190,1]).coeffs
    byf = transf2*vcat(0,(1/invcorrs_kagome[190,1]).coeffs)[:]
    
    
    
    
    pade_gbyf = get_pade(Polynomial(gbyf),6,6)
    pade_ϵbyf = get_pade(Polynomial(ϵbyf),6,6)
    pade_byf = get_pade(Polynomial(byf),6,6)
    pade_gbyf2 = get_pade(Polynomial(gbyf),5,5)
    pade_ϵbyf2 = get_pade(Polynomial(ϵbyf),5,5)
    pade_byf2 = get_pade(Polynomial(byf),5,5)
    
    CairoMakie.lines!(axkagome,xvec, x->3*pade_gbyf(tanh(-f1*x)), color = (color_vec[1],0.7))
    CairoMakie.lines!(axkagome,xvec, x->3*abs(pade_ϵbyf(tanh(-f3*x))), color = (color_vec[2],0.7))
    CairoMakie.lines!(axkagome,xvec, x->3*abs(pade_byf(tanh(-f2*x))), color = (color_vec[3],0.7))
    CairoMakie.lines!(axkagome,xvec, x->3*pade_gbyf2(tanh(-f1*x)), color = color_vec[1], linestyle = :dash)
    CairoMakie.lines!(axkagome,xvec, x->3*abs(pade_ϵbyf2(tanh(-f3*x))), color = color_vec[2], linestyle = :dash)
    CairoMakie.lines!(axkagome,xvec, x->3*abs(pade_byf2(tanh(-f2*x))), color = color_vec[3], linestyle = :dash)
    
end

if true
  f = 0.8
  transf1 = get_LinearTrafoToCoeffs_u(12,f)
  transf2 = get_LinearTrafoToCoeffs_u(13,f)
  gbyf = transf1*(invcorrs_kagome[190,2]/invcorrs_kagome[190,1]).coeffs
  ϵbyf = transf1*(invcorrs_kagome[193,1]/invcorrs_kagome[190,1]).coeffs
  byf = transf2*vcat(0,(1/invcorrs_kagome[190,1]).coeffs)[:]
  
  
  
  
  pade_gbyf = get_pade(Polynomial(gbyf),6,6)
  pade_ϵbyf = get_pade(Polynomial(ϵbyf),6,6)
  pade_byf = get_pade(Polynomial(byf),6,6)
  pade_gbyf2 = get_pade(Polynomial(gbyf),5,5)
  pade_ϵbyf2 = get_pade(Polynomial(ϵbyf),5,5)
  pade_byf2 = get_pade(Polynomial(byf),5,5)
  
  CairoMakie.lines!(axpyro,xvec, x->3*pade_gbyf(tanh(-f1*x)), color = color_vec[1])
  CairoMakie.lines!(axpyro,xvec, x->3*abs(pade_ϵbyf(tanh(-f3*x))), color = color_vec[2])
  CairoMakie.lines!(axpyro,xvec, x->3*abs(pade_byf(tanh(-f2*x))), color = color_vec[3])
  CairoMakie.lines!(axpyro,xvec, x->3*pade_gbyf2(tanh(-f1*x)), color = color_vec[1], linestyle = :dash)
  CairoMakie.lines!(axpyro,xvec, x->3*abs(pade_ϵbyf2(tanh(-f3*x))), color = color_vec[2], linestyle = :dash)
  CairoMakie.lines!(axpyro,xvec, x->3*abs(pade_byf2(tanh(-f2*x))), color = color_vec[3], linestyle = :dash)
  
end




hideydecorations!(axtriang)
hideydecorations!(axpyro)
hidexdecorations!(axchain)
hidexdecorations!(axtriang)
axtriang.ygridvisible =true
axpyro.ygridvisible =true
colgap!(grid, 4)
rowgap!(grid, 2)



leg = axislegend(axtriang, 
[line_gbyf, line_ϵbyf, line_byf ],
[L"g_x/f_x", L"\epsilon_1/f_x", L"x/f_x"],
tellheight = false,
tellwidth = false,
margin = (4, 4, 4, 4),
framevisible = false,
position = :rb,
linewidth = 5,
labelsize = 12,
rowgap = 0.1)


leg = axislegend(axpyro, 
[legline, legdashline, legscatter],
["u-pade [6,6]","u-pade [5,5]","QMC"],
tellheight = false,
tellwidth = false,
margin = (4, -1, 4, 4),
framevisible = false,
position = :rb,
linewidth = 5,
labelsize = 10,
rowgap = 0.1)

resize_to_layout!(fig)
# Plots.savefig("dynHTE_dmrg_test.pdf")
display(fig)
save("CaseStudy/Renormalized_Mean_Field_Theory/rMF.png",fig;px_per_unit = 600/96)
end


